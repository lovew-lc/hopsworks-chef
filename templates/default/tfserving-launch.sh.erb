#!/usr/bin/env bash

WAIT_START=20
MODEL_NAME=$1
HADOOP_HOME=<%= node['hops']['base_dir'] %>
GRPCPORT=$2
RESTPORT=$3
SECRET_DIR=$4
ENABLE_BATCHING=$5
PROJECT_NAME=$6
IMAGE=$7
SERVING_USER=$8
LOGDIR=${SECRET_DIR}/logs
LOGFILE=${LOGDIR}/${MODEL_NAME}.log
PID_FILE=${SECRET_DIR}/tfserving.pid
FILE_SYSTEM_POLLING_INTERVAL_SECS=10
CONTAINER_NAME=tf_model_server_${MODEL_NAME}_${PROJECT_NAME}

NOT_FOUND=127

help() {
    echo ""
    echo "usage: $0 MODEL_NAME GRPCPORT RESTPORT SECRET_DIR BATCHING PROJECTNAME IMAGE_NAME"
    echo ""
    exit 1
}

function kill_named {
    CID=$(docker container list -a | grep -i "$CONTAINER_NAME" | grep -v grep | awk '{print $1}')
    if [ "$CID" != "" ] ; then
	    docker rm -f "$CID" > /dev/null 2>&1
      res=$?
    else
      res=$NOT_FOUND
    fi
    return "$res"
}


if [ $# -ne 8 ]; then
    echo "wrong number of arguments, should be 8 was $#"
  help
fi

if [ ! -d "$SECRET_DIR" ] ; then
    echo "Secret dir does not exist: $SECRET_DIR"
    exit 2
fi

mkdir -p "$LOGDIR"
chown -R "${SERVING_USER}":"${SERVING_GROUP}" "$LOGDIR"

LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${HADOOP_HOME}/lib/native
HADOOP_CONF_DIR=${HADOOP_HOME}/etc/hadoop

cd "$SECRET_DIR" || exit


kill_named

if [ -f "$PID_FILE" ] ; then
    rm $PID_FILE
fi

docker run --rm -d --name $CONTAINER_NAME --cidfile=$PID_FILE\
       --network=host \
       --init \
       -e "MODEL_NAME=${MODEL_NAME}" \
       -e "GRPCPORT=${GRPCPORT}" \
       -e "RESTPORT=${RESTPORT}" \
       -e "SECRET_DIR=${SECRET_DIR}" \
       -e "ENABLE_BATCHING=${ENABLE_BATCHING}" \
       -e "PROJECT_NAME=${PROJECT_NAME}" \
       -e "FILE_SYSTEM_POLLING_INTERVAL_SECS=${FILE_SYSTEM_POLLING_INTERVAL_SECS}" \
       -e "HADOOP_HDFS_HOME=${HADOOP_HOME}" \
       -e "HADOOP_CONF_DIR=${HADOOP_CONF_DIR}" \
       -e "HADOOP_CLIENT_OPTS='-Dfs.permissions.umask-mode=0002'" \
       -e "HADOOP_HOME=${HADOOP_HOME}" \
       -e "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"\
       -v $SECRET_DIR:$SECRET_DIR:rw\
       -v ${HADOOP_CONF_DIR}:${HADOOP_CONF_DIR}:ro \
       -u="yarnapp" \
       -w="$SECRET_DIR" \
       $IMAGE \
       tfserving-launcher.sh &

# Check that the token is written to the logfile, return when we see it.
timeout=0
while [ $timeout -lt $WAIT_START ] ; do
	sleep 1
	grep 'serving' "$LOGFILE"
        if [ $? -eq 0 ] ; then
          break
        fi
	echo -n "."
	timeout=$((timeout + 1))
done
echo ""

# If the timeout was exceeded, kill tfserver
if [ "$timeout" -eq $WAIT_START ] ; then
 CID=$(cat "$PID_FILE")
 docker rm -f "$CID" > /dev/null 2>&1
 if [ $? -ne 0 ] ; then
     kill_named
 fi
fi

exit $?
